apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "labels.common" . | nindent 4 }}
spec:
  updateStrategy: {{ toYaml .Values.updateStrategy | nindent 4 }}
  selector:
    matchLabels:
      {{- include "labels.selector" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "labels.common" . | nindent 8 }}
    spec:
      priorityClassName: system-cluster-critical
      securityContext:
        runAsUser: 0
        runAsGroup: 0
      serviceAccountName: {{ .Values.name }}
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      tolerations:
      - effect: NoSchedule
        operator: "Exists"
        key: node-role.kubernetes.io/master
      nodeSelector:
        node-role.kubernetes.io/master: ""
      containers:
      - name: node-cache
        image: "{{ .Values.image.registry }}/{{ .Values.image.name }}:{{ .Values.image.tag }}"
        {{- if .Values.resources }}
        resources: {{ toYaml .Values.resources | nindent 8 }}
        {{- end }}
        args:
        - --kubeconfig=/etc/kubernetes/kubeconfig/controller-manager.yaml
        - --use-instance-metadata=true
        - --wait-routes=true
        - --node-name="$(K8S_NODE_NAME)"
        - --logtostderr=true
        - --v=2
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
        volumeMounts:
        - mountPath: /etc/kubernetes/
          name: etc-kubernetes
          readOnly: true
        {{- if .Values.resources }}
        resources: {{ toYaml .Values.resources | nindent 10 }}
        {{- end }}
      volumes:
      - hostPath:
          path: /etc/kubernetes
        name: etc-kubernetes
